services:
  traefik:
    image: traefik:v3.1
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # SSL
      - "--certificatesResolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.email=vecheslav@sparker.space"
      - "--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - orderbook
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt

  api:
    image: ghcr.io/compolabs/sparker-orderbook:main
    command: ["./sparker-api"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.sparker.space`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3011"
      # Optional: HTTP to HTTPS redirect middleware
      - "traefik.http.middlewares.api-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.api.middlewares=api-redirect"
    env_file:
      - .env
    environment:
      RUST_LOG: sparker_api=debug
    networks:
      - orderbook
    depends_on:
      - postgres

  grpc:
    image: ghcr.io/compolabs/sparker-orderbook:main
    command: ["./sparker-grpc"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grpc.rule=Host(`grpc.sparker.space`)"
      - "traefik.http.routers.grpc.entrypoints=websecure"
      - "traefik.http.routers.grpc.tls=true"
      - "traefik.http.routers.grpc.tls.certresolver=letsencrypt"
      - "traefik.http.services.grpc.loadbalancer.server.port=50051"
      - "traefik.http.services.grpc.loadbalancer.server.scheme=h2c"
    env_file:
      - .env
    environment:
      RUST_LOG: sparker_grpc=debug
    networks:
      - orderbook
    depends_on:
      - postgres

  forge-ethusdc:
    image: ghcr.io/compolabs/sparker-orderbook:main
    env_file:
      - .env
      - forge.env
    environment:
      MARKET_ID: 0xfe2c524ad8e088f33d232a45dbea43e792861640b71aa1814b30506bf8430ee5
    networks:
      - orderbook
    deploy:
      replicas: 1
    depends_on:
      - postgres

  forge-usdcusdt:
    image: ghcr.io/compolabs/sparker-orderbook:main
    env_file:
      - .env
      - forge.env
    environment:
      MARKET_ID: 0xdafe498b31f24ea5577055e86bf77e96bcba2c39a7ae47abaa819c303a45a352
    networks:
      - orderbook
    deploy:
      replicas: 1
    depends_on:
      - postgres

  forge-fuelusdc:
    image: ghcr.io/compolabs/sparker-orderbook:main
    env_file:
      - .env
      - forge.env
    environment:
      MARKET_ID: 0x81e83f73530c262b0dbf5414649a875c48a48144de3c08ff68cb9d54b36f2eaa
    networks:
      - orderbook
    deploy:
      replicas: 1
    depends_on:
      - postgres

  postgres:
    image: postgres
    user: postgres
    env_file:
      - postgres.env
    environment:
      POSTGRES_DB: orderbook
    networks:
      - orderbook
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  letsencrypt:
  postgres_data:

networks:
  orderbook:
    external: true
